openapi: 3.0.3
info:
  title: Swagger Server - OpenAPI 3.0
  description: |-
    Mail api description
  termsOfService: http://swagger.io/terms/
  contact:
    email: sara.lorente@gmail.com
  version: 1.0.0
servers:
  - url: cloud run
paths:
  /add:
    post:
      tags:
        - add
      summary: Add user/newsletter
      description: Add user/newsletter
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertNewsletter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddResponse' 
        '400':
          description: User/newsletter already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorField' 
        '404':
          description: Missing required value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorField' 
        '500':
          description: Error
  /getNewsletters:
    get:
      tags:
        - getNewsletteres
      summary: Returns the list of newsletters
      description: Returns the list of newsletters for the provided email
      operationId: getNewsletters
      parameters:
        - name: email
          in: query
          description: Email to which the newsletter should be sent
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Newsletters'          
        '404':
          description: Missing required value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorField' 
        '500':
          description: Error
  /getDetails:
    get:
      tags:
        - details
      summary: Get details
      description: Returns details for newsletter/email
      operationId: getDetails
      parameters:
        - name: email
          in: query
          description: Email to which the newsletter should be sent
          required: true
          schema:
            type: string
        - name: newsletter
          in: query
          description: Name of the newsletter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailsResponse'          
        '404':
          description: Missing required value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorField' 
        '500':
          description: Error
  /deleteNewsletters:
    delete:
      tags:
        - delete
      summary: Delete newsletter/email
      description: Delete the newsletter for the provided email
      operationId: deleteNewsletter
      parameters:
        - name: email
          in: query
          description: Email to which the newsletter should be sent
          required: true
          schema:
            type: string
        - name: newsletter
          in: query
          description: Name of the newsletter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: Missing required value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorField' 
        '500':
          description: Error
components:
  schemas:
    InsertNewsletter:
      type: object
      properties:
        email:
          type: string
          example: text@text.com
        name:
          type: string
          example: sara
        birth:
          type: string
          format: date-time
        newsletter:
          type: string
        gender:
          type: string
    AddResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
    ErrorField:
      type: object
      properties:
        err:
          type: string
    Newsletters:
      type: object
      properties:
        newsletter:
          type: string
    DetailsResponse:
      type: object
      properties:
        birth: 
          type: string
        gender: 
          type: string
        name: 
          type: string
        newsletter:
          type: string
        email:
          type: string